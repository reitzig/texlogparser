#!/usr/bin/env ruby
# frozen_string_literal: true

require 'tex_log_parser'
require 'tex_log_parser/version'
require 'optparse'
require 'json'

# Defaults
options = {
  format: :file_line,
  input: STDIN,
  output: STDOUT
}
formats = %i[file_line json]

OptionParser.new do |opts|
  opts.banner = 'Usage: texlogparser [options]'
  opts.on('-d', '--debug', 'Output debug information') do
    Logger.debugging = true
  end
  opts.on('-f ENUM', '--format ENUM', formats,
          'Output format', "One of: #{formats.map(&:to_s).join(', ')}") do |format|
    options[:format] = format
  end
  opts.on('-i', '--input PATH', 'Read input from PATH') do |path|
    unless File.file?(path)
      STDERR.puts("No such file: #{path}")
      exit 1
    end

    options[:input] = path
  end
  opts.on('-o', '--output PATH', 'Write output to PATH') do |path|
    options[:output] = path
  end
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
  opts.on_tail('-v', '--version', 'Show version') do
    puts TexLogParser::VERSION
    exit
  end

  begin
    opts.parse!
  rescue StandardError => e
    STDERR.puts e
    exit 1
  end

  if !options[:input].is_a?(String) && STDIN.tty?
    STDERR.puts opts.help
    exit 1
  end
end

input = STDIN
input = File.open(options[:input], 'r') if options[:input].is_a?(String)
parser = TexLogParser.new(input, options)
messages = parser.parse

output = STDOUT
output = File.open(options[:output], 'w') if options[:output].is_a?(String)
case options[:format]
when :file_line
  output.write(messages.map(&:to_s).join("\n\n"))
  # TODO: print summary?
when :json
  output.write(JSON.pretty_generate(messages))
end
output.close
